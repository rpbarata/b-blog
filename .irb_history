Rails.root.join("spec/fixtures")
"#{::Rails.root}/spec/fixtures"
rubocop -A
exit
["oi", "adeus"]
["oi", "adeus"].uniq.map(&:capitalize).join(", ")
exit
Author:Class
User.methods
reload!
User
User.slug
User.klass
User.first.klass
User.all.klass
User.all.klass.name
User.all.klass.slug
User.all.klass.username
User.all.klass
User.all.klass.find_by(:id)
User.all.klass.find_by
User.all.klass.find_by(id: 1)
User.all.klass.find_by(id: 2)
User.all.klass.slugs
User.all.klass.slug
reload!
User.all.klass.slugs
reload!
User.first
exit
Article.last.update(published_date: Time.now)
exit
Admin.first
Admin.count
Admin.first_or_create!(\
  Array.new(10) do\
    {\
      email: Faker::Internet.unique.email,\
      first_name: Faker::Name.unique.first_name,\
      last_name: Faker::Name.unique.last_name,\
      username: "admin_#{Faker::Internet.unique.username}",\
      password: "1234567",\
    }\
  end,\
)
SuperAdmin.first_or_create!(\
  {\
    email: "superadmin@mail.com",\
    first_name: "Super",\
    last_name: "Admin",\
    username: "superadmin",\
    password: "1234567",\
  },\
)
Author.first_or_create!(\
  Array.new(20) do\
    {\
      email: Faker::Internet.unique.email,\
      first_name: Faker::Name.unique.first_name,\
      last_name: Faker::Name.unique.last_name,\
      username: Faker::Internet.unique.username,\
      password: "1234567",\
    }\
  end,\
)
User.find_each do |user|\
  downloaded_image = URI.parse(Faker::Avatar.image(size: "50x50", format: "jpg")).open\
  user.avatar.attach(io: downloaded_image, filename: "image.png")\
end
Category.first_or_create!(\
  [\
    { name: "Cooking and recipes" },\
    { name: "Beauty hacks" },\
    { name: "Relationships" },\
    { name: "Gardening" },\
    { name: "Health and Fitness" },\
    { name: "Lifestyle hacks" },\
    { name: "Fashion and trends" },\
    { name: "Mom’s blog" },\
    { name: "Parenting" },\
    { name: "Personal care" },\
    { name: "Travel" },\
    { name: "Food and reviews" },\
    { name: "DIY &Crafts" },\
    { name: "Home decors" },\
    { name: "Finances (money-making)" },\
    { name: "Men’s blog" },\
  ],\
)
Article.first_or_create!(\
  Array.new(10) do\
    {\
      tittle: Faker::Lorem.sentence,\
      author_id: Author.ids.sample,\
      category_id: Category.ids.sample,\
      body: Faker::Lorem.paragraphs(number: 5),\
      header: Faker::Lorem.paragraphs(number: 2),\
      status: ::Article.statuses.keys.sample.to_sym,\
    }\
  end,\
)
Article.find_each do |article|\
  published_date = article.published? ? Faker::Time.between(from: 14.days.ago, to: Time.now) : nil\
  downloaded_image = URI.parse(Faker::LoremPixel.image).open\
\
  article.header_image.attach(io: downloaded_image, filename: "image.png")\
  article.update(published_date: published_date)\
end
require 'uri'
Article.find_each do |article|\
  published_date = article.published? ? Faker::Time.between(from: 14.days.ago, to: Time.now) : nil\
  downloaded_image = URI.parse(Faker::LoremPixel.image).open\
\
  article.header_image.attach(io: downloaded_image, filename: "image.png")\
  article.update(published_date: published_date)\
end
require 'open-uri'
Article.find_each do |article|\
  published_date = article.published? ? Faker::Time.between(from: 14.days.ago, to: Time.now) : nil\
  downloaded_image = URI.parse(Faker::LoremPixel.image).open\
\
  article.header_image.attach(io: downloaded_image, filename: "image.png")\
  article.update(published_date: published_date)\
end
require 'open-uri'
Article.find_each do |article|\
  published_date = article.published? ? Faker::Time.between(from: 14.days.ago, to: Time.now) : nil\
  downloaded_image = URI.parse(Faker::LoremPixel.image).open\
\
  article.header_image.attach(io: downloaded_image, filename: "image.png")\
  article.update(published_date: published_date)\
end
require 'open-uri'
Article.find_each do |article|\
  published_date = article.published? ? Faker::Time.between(from: 14.days.ago, to: Time.now) : nil\
  downloaded_image = URI.parse(Faker::LoremFlickr.image).open\
\
  article.header_image.attach(io: downloaded_image, filename: "image.png")\
  article.update(published_date: published_date)\
end
exit
